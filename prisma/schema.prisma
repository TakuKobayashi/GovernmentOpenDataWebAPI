generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Category {
  id                 Int               @id @default(autoincrement())
  title              String            @unique
  description        String?           @db.Text
  data_categories    DataCategory[]
  crawler_categories CrawlerCategory[]

  @@map("categories")
}

model Place {
  id               Int                 @id @default(autoincrement())
  hashcode         String              @unique @db.VarChar(255)
  name             String              @db.VarChar(255)
  province         String?
  city             String?
  address          String?             @db.VarChar(255)
  lat              Float?
  lon              Float?
  geohash          String?             @db.VarChar(255)
  place_categories DataCategory[]      @relation("DataCategoryPlaceSource")
  import_crawlers  ImportCrawlerData[] @relation("ImportCrawlerPlaceSource")

  @@index([geohash])
  @@map("places")
}

model DataCategory {
  id          Int        @id @default(autoincrement())
  source_id   Int
  source_type SourceType
  category_id Int
  extra_info  Json?
  place       Place      @relation("DataCategoryPlaceSource", fields: [source_id], references: [id], map: "place_category_source_id")
  category    Category   @relation(fields: [category_id], references: [id])

  @@unique([source_type, source_id, category_id])
  @@map("data_categories")
}

model Crawler {
  id                  Int                   @id @default(autoincrement())
  origin_url          String                @unique @db.VarChar(255)
  origin_file_ext     String                @default(".html")
  origin_title        String?               @db.VarChar(255)
  checksum            String?               @db.VarChar(255)
  need_manual_edit    Boolean               @default(false)
  state               CrawlerState          @default(STANDBY)
  last_updated_at     DateTime?
  origin_file_encoder String?
  origin_file_size    BigInt                @default(0)
  crawler_categories  CrawlerCategory[]     @relation("CrawlerCategory")
  import_crawler_data ImportCrawlerData[]
  import_fail_logs    ImportFailLog[]
  crawler_keywords    CrawlerKeyword[]
  parents             CrawlerRootRelation[] @relation("CrawlerOriginUrl")

  @@index([last_updated_at])
  @@map("crawlers")
}

model ImportFailLog {
  id             Int        @id @default(autoincrement())
  crawl_url      String
  file_path      String?
  to_source_type SourceType
  fail_logs      Json?
  crawler        Crawler    @relation(fields: [crawl_url], references: [origin_url])

  @@index([crawl_url])
  @@map("import_fail_logs")
}

model ImportCrawlerData {
  id          Int        @id @default(autoincrement())
  source_id   Int
  source_type SourceType
  crawl_url   String
  extra_info  Json?
  place       Place      @relation("ImportCrawlerPlaceSource", fields: [source_id], references: [id], map: "import_crawler_place_source_id")
  crawler     Crawler    @relation(fields: [crawl_url], references: [origin_url])

  @@unique([crawl_url, source_type, source_id])
  @@map("import_crawler_data")
}

model Gsimuni {
  id                Int    @id @default(autoincrement())
  prefecture_number Int
  prefecture_name   String
  municd            Int    @unique
  municipality      String

  @@map("gsimunis")
}

model CrawlerCategory {
  id           Int         @id @default(autoincrement())
  crawler_type CrawlerType
  crawler_id   Int
  category_id  Int
  crawler_root CrawlerRoot @relation("CrawlerRootCategory", fields: [crawler_id], references: [id], map: "crawler_root_category")
  crawler      Crawler     @relation("CrawlerCategory", fields: [crawler_id], references: [id], map: "crawler_category")
  category     Category    @relation(fields: [category_id], references: [id])

  @@unique([crawler_type, crawler_id, category_id])
  @@map("crawler_categories")
}

model CrawlerRoot {
  id                 Int                   @id @default(autoincrement())
  url                String                @unique @db.VarChar(255)
  last_updated_at    DateTime?
  childlen           CrawlerRootRelation[]
  parents            CrawlerRootRelation[] @relation("CrawlerRootUrl")
  crawler_categories CrawlerCategory[]     @relation("CrawlerRootCategory")

  @@map("crawler_roots")
}

model CrawlerRootRelation {
  id                   Int         @id @default(autoincrement())
  to_url               String      @db.VarChar(255)
  to_crawler_type      CrawlerType
  from_crawler_root_id Int
  crawler              Crawler     @relation("CrawlerOriginUrl", fields: [to_url], references: [origin_url], map: "crawler_to_url")
  child_crawler_root   CrawlerRoot @relation("CrawlerRootUrl", fields: [to_url], references: [url], map: "crawler_root_to_url")
  parent_crawler_root  CrawlerRoot @relation(fields: [from_crawler_root_id], references: [id])

  @@unique([from_crawler_root_id, to_crawler_type, to_url])
  @@index([to_crawler_type, to_url])
  @@map("crawler_root_relations")
}

model CrawlerKeyword {
  id         Int     @id @default(autoincrement())
  crawler_id Int
  keyword_id Int
  score      Float   @default(0)
  crawler    Crawler @relation(fields: [crawler_id], references: [id])
  keyword    Keyword @relation(fields: [keyword_id], references: [id])

  @@unique([keyword_id, crawler_id])
  @@index([crawler_id])
  @@map("crawler_keywords")
}

model Keyword {
  id               Int              @id @default(autoincrement())
  word             String           @unique @db.VarChar(255)
  appear_count     Int              @default(0)
  crawler_keywords CrawlerKeyword[]

  @@map("keywords")
}

enum CrawlerState {
  STANDBY
  DOWNLOADED
  KEYWORD_GENERATED
  IMPORTED
  IMPORT_FAILED
}

enum SourceType {
  Place
}

enum CrawlerType {
  CrawlerRoot
  Crawler
}
