事業名,施行位置,面　積　㎡,事業計画決定公告日,総事業費　億円,整理前公共用地　㎡,うち道路,うち公園,うちその他,整理後公共用地　㎡,うち道路,うち公園,うちその他,保留地　㎡,減歩率　％,公共減歩,保留地減歩,換地処分公告日
上沼田第一,足立区上沼田町他,204140,1968/2/1,4,21851,18497,0,3354,55935,42836,10648,2451,5644,21.81,18.72,3.09,1973/1/19
田端四丁目付近,北区西ヶ原町、田端町他,412463,1985/3/28,24,40181,35223,0,4958,116317,108979,7338,0,14502,24.3,20.5,3.8,1988/3/30
葛西沖開発,江戸川区清新町一、二丁目他,3798659,1972/8/24,847,51619,0,0,51619,1034011,573391,47601,413019,638314,43.3,26.2,17.1,1988/9/20
池袋二丁目付近,豊島区池袋二丁目他,205549,1965/1/30,313,18635,18230,0,405,68067,66071,1996,0,0,26.4,26.4,0,1991/3/30
足立北部舎人町付近（全体）,足立区入谷町、舎人町他,1842498,1971/1/20,405,160999,116096,0,44903,506483,408933,83928,13622,0,20.55,20.55,0,0
足立北部舎人町付近（第一工区）,足立区入谷町、舎人町,608859,1971/1/20,0,36362,31132,0,5230,164522,140396,24126,0,0,22.39,22.39,0,1991/10/31
足立北部舎人町付近（第二工区）,足立区入谷町、舎人町他,784737,1971/1/20,0,66070,41676,0,24394,213287,164466,35199,13622,0,20.48,20.48,0,1995/3/31
足立北部舎人町付近（第三工区）,足立区入谷町、舎人町他,448902,1971/1/20,0,58567,43288,0,15279,128674,104071,24603,0,0,17.96,17.96,0,1994/3/31
西瑞江駅付近,江戸川区南篠崎町三丁目他,288616,1982/1/20,196,52657,31369,5738,15550,90038,78045,6121,5871,0,15.79,15.79,0,1996/3/29
四葉二丁目付近,板橋区四葉二丁目他,203519,1983/8/10,125,16176,15771,4,401,51037,43695,5238,2104,3481,20.47,18.61,1.86,1997/3/31
篠崎駅付近,江戸川区篠崎町一丁目他,153909,1986/11/15,174,37136,24628,2687,9820,54678,47090,7588,0,0,14.88,14.88,0,1998/3/31
瑞江駅南部,江戸川区南篠崎町二丁目他,339311,1988/4/14,425,54645,50576,2740,1328,99331,89129,10202,0,0,15.68,15.68,0,2005/3/31
小野路第一,多摩市小野路町字平久保他,181607,1976/11/30,40,12208,11531,0,677,57089,47252,5417,4420,0,26.49,26.49,0,1982/2/15
小野路第二,多摩市小野路町字一本杉他,44980,1973/8/17,4,2014,2014,0,0,13077,11431,1646,0,0,25.75,25.75,0,1977/2/15
小野路第三,多摩市小野路町字瓜生他,69222,1973/8/17,7,6717,5371,0,1346,22207,18774,3433,0,0,24.78,24.78,0,1977/2/15
多摩（第一工区）,多摩市大字関戸他,1948062,1969/2/8,363,207205,133446,0,73759,700686,522752,50421,127513,46871,31.04,28.35,2.69,1993/9/10
多摩（第二工区）,多摩市大字連光寺字諏訪坂他,271606,1972/4/25,74,20237,15482,0,4755,74497,64142,8248,2107,11299,26.08,21.59,4.49,1990/1/26
由木,八王子字大字上由木他,2020039,1973/7/7,528,259580,134612,0,124968,745507,501261,72180,172066,21752,28.84,27.6,1.24,1996/6/14
西国分寺,国分寺市泉町一丁目他,224923,1995/12/15,61,105630,5229,100401,0,140609,32708,107901,0,7000,36,30.1,5.9,2003/3/31
相原・小山,町田市小山町、相原町他,1741657,1988/3/31,766,103622,96746,0,6876,596509,239029,162700,194780,292637,47.96,30.09,17.87,2004/3/31
秋葉原駅付近,千代田区外神田一丁目他,87581,1997/4/9,346,19493,19493,0,0,42803,41759,1044,0,600,35.1,34.2,0.9,2011/3/28
新砂,江東区新砂二丁目他,311605,1997/7/1,72,10360,10360,0,0,65410,55911,9498,0,21000,25.25,18.27,6.98,2004/8/2
田端二丁目付近,北区田端一丁目他,75361,1998/2/16,207,6623,6221,0,402,19708,19708,0,0,0,19.04,19.04,0,2015/10/28
汐留,港区東新橋一丁目他,307086,1995/3/7,"1,463",32081,29234,0,2848,115917,111276,4640,0,32370,42.26,30.49,11.77,2015/10/30
晴海四・五丁目,中央区晴海四丁目他,230009,2006/3/17,109,86553,86389,0,164,89920,89757,0,163,0,2.35,2.35,0,2016/1/21
花畑北部,足立区花畑一丁目他,544377,1991/5/15,514,45870,29933,3543,12394,148160,131829,10226,6105,1000,20.72,20.52,0.2,2017/3/10
篠崎駅東部,江戸川区篠崎町一丁目他,193488,1995/5/24,303,39156,33383,0,5773,61795,55695,6100,0,0,14.67,14.67,0,2018/3/27
豊洲,江東区豊洲二丁目他,910741,1997/11/17,566,34913,34696,0,217,195898,158662,36801,435,72358,26.64,18.38,8.26,2019/6/28
有明北,江東区有明一丁目他,851869,1999/3/25,382,250219,74853,163384,11982,307806,132262,163346,12198,24885,13.71,9.57,4.14,2019/8/30
六町四丁目付近,足立区六町一丁目他,690295,1998/3/30,"1,313",89003,63643,4729,20631,205241,182978,16569,5694,0,19.33,19.33,0,事業中
瑞江駅西部,江戸川区西瑞江二丁目他,303717,1994/7/11,452,45810,23814,991,21005,95057,85941,9116,0,0,19.09,19.09,0,2020/2/28
新宿駅直近地区,新宿区新宿三丁目他,101321.4,44384,728,38286.65,38286.65,0,0,38286.65,38286.65,0,0,0,0,0,0,事業中
瑞江駅西Pc}px)`);

// id for scroll lock
const HEADER_ID = 'header';

const className = {
  scrollLock: 'scroll-lock',
};

const selector = {
  layoutSpecial: '[data-header-layout="special"]',
  header: '[data-header-menu-ui="header"]',
  openTrigger: '[data-header-menu-ui="open-trigger"]',
  closeTrigger: '[data-header-menu-ui="close-trigger"]',
  menu: '[data-header-menu-ui="menu"]',
  menuContent: '[data-header-menu-ui="menu-content"]',
  menuTrigger: '[data-header-menu-ui="menu-trigger"]',
  menuLgCloseTrigger: '[data-header-menu-ui="menu-lg-close-trigger"]',
  menuLgOverlay: '[data-header-menu-ui="menu-lg-overlay"]',
  searchForm: '[data-header-menu-ui="search-form"]',
  searchSelect: '[data-header-menu-ui="search-select"]',
  searchInput: '[data-header-menu-ui="search-input"]',
};

const focusableSelector = 'a[href], area[href], input:not([disabled]), button:not([disabled]), object, embed, [tabindex="0"], [contenteditable]';

const isSpecialLayout = fragmentElement.querySelector(selector.layoutSpecial);

const header = fragmentElement.querySelector(selector.header);
const menu = fragmentElement.querySelector(selector.menu);

const delay = async (delayTime = 0) => {
  await new Promise(function (resolve) {
    setTimeout(() => {
      resolve();
    }, delayTime);
  });
};

const hasScrollAPI = () => {
  return window.MetroTokyo && window.MetroTokyo.Module && window.MetroTokyo.Module.Scroll;
};

// * 繧ｭ繝ｼ繝ｯ繝ｼ繝画､懃ｴ｢
const {
  init: initSearch,
  finalize: finalizeSearch,
  bind: bindSearch,
  unbind: unbindSearch,
} = (function () {
  const searchForm = fragmentElement.querySelector(selector.searchForm);
  const searchSelect = fragmentElement.querySelector(selector.searchSelect);
  const searchInput = fragmentElement.querySelector(selector.searchInput);

  const createSearchOption = () => {
    SEARCH_LIST.forEach((item) => {
      const option = document.createElement('option');
      option.value = item.host;
      option.textContent = item.label;
      searchSelect.appendChild(option);
    });
  };

  const createHiddenInput = (name, value) => {
    const input = document.createElement('input');
    input.type = 'hidden';
    input.name = name;
    input.value = value;
    searchForm.appendChild(input);
  };

  const removeHiddenInput = () => {
    const hiddenInputList = searchForm.querySelectorAll('input[type="hidden"]');
    hiddenInputList.forEach((item) => {
      item.remove();
    });
  };

  const updateHiddenInput = (item) => {
    removeHiddenInput();

    Object.keys(item.param).forEach((key) => {
      if (item.param[key] === '$KEYWORD$') {
        createHiddenInput(key, searchInput.value);
      } else {
        createHiddenInput(key, item.param[key]);
      }
    });
  };

  const setSelectValue = () => {
    const currentHost = window.location.host;
    const target = SEARCH_LIST.find((item) => item.host === currentHost);

    if (target) {
      searchSelect.value = target.host;
      return target;
    } else {
      const defaultTarget = SEARCH_LIST[0];
      searchSelect.value = defaultTarget.host;
      return defaultTarget;
    }
  };

  const updateFormAttribute = (target) => {
    searchForm.action = target.resultUrl;

    const resultUrlObj = new URL(target.resultUrl);
    const currentHost = window.location.host;

    if (currentHost === resultUrlObj.host) {
      searchForm.removeAttribute('target');
    } else {
      searchForm.setAttribute('target', '_blank');
    }
  };

  const handleChange = () => {
    const selectedHost = searchSelect.value;
    const target = SEARCH_LIST.find((item) => item.host === selectedHost);
    if (!target) return;

    updateFormAttribute(target);
    updateHiddenInput(target);
  };

  const handleSelectKeydown = (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
    }
  };

  const init = () => {
    createSearchOption();
    const target = setSelectValue();
    updateFormAttribute(target);
    updateHiddenInput(target);
  };

  const finalize = () => {};

  const bind = () => {
    searchInput.addEventListener('change', handleChange);
    searchSelect.addEventListener('change', handleChange);
    searchSelect.addEventListener('keydown', handleSelectKeydown);
  };

  const unbind = () => {};

  return { init, finalize, bind, unbind };
})();

// * 繝｡繝九Η繝ｼ
const {
  init: initMenu,
  finalize: finalizeMenu,
  bind: bindMenu,
  unbind: unbindMenu,
} = (function () {
  const scrollLock = () => {
    hasScrollAPI() ? window.MetroTokyo.Module.Scroll.lock(HEADER_ID) : document.body.classList.add(className.scrollLock);
  };

  const scrollUnLock = () => {
    hasScrollAPI() ? window.MetroTokyo.Module.Scroll.unlock(HEADER_ID) : document.body.classList.remove(className.scrollLock);
  };

  const open = async () => {
    scrollLock();

    menu.hidden = false;
    await delay(0);
    menu.dataset.headerMenuState = 'open';

    // iOS
    header.style.position = 'fixed';

    fragmentElement.querySelectorAll(selector.openTrigger).forEach((el) => {
      el.hidden = true;
    });
    fragmentElement.querySelectorAll(selector.closeTrigger).forEach((el) => {
      el.hidden = false;
    });
  };

  const close = () => {
    scrollUnLock();

    menu.dataset.headerMenuState = 'close';

    header.style.position = null;

    fragmentElement.querySelectorAll(selector.openTrigger).forEach((el) => {
      el.hidden = false;
    });
    fragmentElement.querySelectorAll(selector.closeTrigger).forEach((el) => {
      el.hidden = true;
    });
  };

  const isInViewport = () => {
    const rect = fragmentElement.querySelector(selector.header).getBoundingClientRect();
    const windowHeight = window.innerHeight || document.documentElement.clientHeight;
    const windowWidth = window.innerWidth || document.documentElement.clientWidth;

    return Math.floor(rect.top) >= 0 && Math.floor(rect.left) >= 0 && Math.floor(rect.bottom) <= windowHeight && Math.floor(rect.right) <= windowWidth;
  };

  const handleClick = async (e) => {
    const openTrigger = e.target.closest(selector.openTrigger);
    const closeTrigger = e.target.closest(selector.closeTrigger);

    if (document.documentElement.scrollTop !== 0 && !isInViewport()) {
      await window.MetroTokyo.Module.Scroll.goTo(0);
    }

    if (openTrigger) {
      if (openTrigger.getAttribute('aria-expanded') === 'false') {
        open();
      } else {
        close();
      }
      return;
    }

    if (closeTrigger) {
      close();
    }
  };

  const handleMenuTransitionEnd = () => {
    if (menu.dataset.headerMenuState === 'close') {
      menu.hidden = true;
    }
  };

  const init = () => {
    menu.hidden = true;
  };

  const finalize = () => {
    close();
  };

  const bind = () => {
    header.addEventListener('click', handleClick);
    menu.addEventListener('transitionend', handleMenuTransitionEnd);
  };

  const unbind = () => {
    header.removeEventListener('click', handleClick);
    menu.removeEventListener('transitionend', handleMenuTransitionEnd);
  };

  return { init, finalize, bind, unbind };
})();

// * 繧｢繧ｳ繝ｼ繝�ぅ繧ｪ繝ｳ��P譎ゑｼ�
const {
  init: initAccordion,
  finalize: finalizeAccordion,
  bind: bindAccordion,
  unbind: unbindAccordion,
} = (function () {
  const open = async (trigger) => {
    const id = trigger.getAttribute('aria-controls');
    trigger.setAttribute('aria-expanded', 'true');

    const container = document.getElementById(id);
    container.hidden = false;
    const containerHeight = container.scrollHeight;
    container.style.height = '0px';

    await delay(0);

    container.style.height = `${containerHeight}px`;
    container.dataset.headerMenuAccordionState = 'open';
  };

  const close = async (trigger) => {
    const id = trigger.getAttribute('aria-controls');
    trigger.setAttribute('aria-expanded', 'false');

    const container = document.getElementById(id);

    container.style.height = `${container.offsetHeight}px`;
    container.dataset.headerMenuAccordionState = 'close';

    await delay(0);

    container.style.height = '0px';
  };

  const handleClick = (e) => {
    const trigger = e.target.closest(selector.menuTrigger);

    if (!trigger) return;

    if (trigger.getAttribute('aria-expanded') === 'false') {
      open(trigger);
    } else {
      close(trigger);
    }
  };

  const handleTransitionEnd = (e) => {
    const container = e.target;
    if (e.propertyName !== 'height') return;
    if (!container.dataset.headerMenuAccordionState) return;

    if (container.dataset.headerMenuAccordionState === 'close') {
      container.hidden = true;
    }
    container.style.height = '';
  };

  const init = () => {
    const accordionContents = fragmentElement.querySelectorAll(selector.menuContent);

    accordionContents.forEach((el) => {
      const triggerBtn = fragmentElement.querySelector(`[aria-controls="${el.id}"]`);

      if (el.dataset.headerMenuAccordionState === 'open') {
        el.hidden = false;
        triggerBtn.setAttribute('aria-expanded', 'true');
      } else {
        el.hidden = true;
        triggerBtn.setAttribute('aria-expanded', 'false');
      }
    });
  };

  const finalize = () => {};

  const bind = () => {
    fragmentElement.addEventListener('click', handleClick);
    fragmentElement.addEventListener('transitionend', handleTransitionEnd);
  };

  const unbind = () => {
    fragmentElement.removeEventListener('click', handleClick);
    fragmentElement.removeEventListener('transitionend', handleTransitionEnd);
  };

  return { init, finalize, bind, unbind };
})();

// * 繧ｪ繝ｼ繝舌�繝ｬ繧､繝｡繝九Η繝ｼ��C譎ゑｼ�
const {
  init: initMenuLg,
  finalize: finalizeMenuLg,
  bind: bindMenuLg,
  unbind: unbindMenuLg,
} = (function () {
  let beforeFocusedElement = null;

  const scrollLock = () => {
    hasScrollAPI() ? window.MetroTokyo.Module.Scroll.lock(HEADER_ID) : document.body.classList.add(className.scrollLock);
  };

  const scrollUnLock = () => {
    hasScrollAPI() ? window.MetroTokyo.Module.Scroll.unlock(HEADER_ID) : document.body.classList.remove(className.scrollLock);
  };

  const open = async (id, isAnimate) => {
    scrollLock();

    // trigger
    fragmentElement.querySelectorAll(`[aria-controls="${id}"]`).forEach((el) => {
      el.setAttribute('aria-expanded', 'true');
    });

    const targetMenuLg = document.getElementById(id);
    const targetMenuLgOverlay = targetMenuLg.querySelector(selector.menuLgOverlay);

    // aria
    targetMenuLg.setAttribute('role', 'dialog');
    targetMenuLg.setAttribute('aria-modal', 'true');

    // bind
    targetMenuLg.addEventListener('keydown', handleMenuKeyDown);
    targetMenuLg.addEventListener('click', handleOverlayClick);

    if (isAnimate) {
      targetMenuLg.hidden = false;
      await delay(0);
      targetMenuLg.dataset.headerMenuLgState = 'open';
      targetMenuLgOverlay.dataset.headerMenuLgState = 'open';
    } else {
      targetMenuLg.dataset.headerMenuLgState = 'open';
      targetMenuLgOverlay.dataset.headerMenuLgState = 'open';
      targetMenuLg.hidden = false;
    }

    // focus
    const focusableElements = Array.from(targetMenuLg.querySelectorAll(focusableSelector)).filter((el) => {
      return el.offsetParent !== null;
    });
    const firstFocusableElement = focusableElements[0];
    firstFocusableElement.focus();
  };

  const close = (isAnimate) => {
    scrollUnLock();

    const id = getActiveMenuId();

    // trigger
    fragmentElement.querySelectorAll(`[aria-controls="${id}"]`).forEach((el) => {
      el.setAttribute('aria-expanded', 'false');
    });

    const targetMenuLg = document.getElementById(id);

    if (!targetMenuLg) return;

    const targetMenuLgOverlay = targetMenuLg.querySelector(selector.menuLgOverlay);

    // aria
    targetMenuLg.removeAttribute('role');
    targetMenuLg.removeAttribute('aria-modal');

    // unbind
    targetMenuLg.removeEventListener('keydown', handleMenuKeyDown);
    targetMenuLg.removeEventListener('click', handleOverlayClick);

    if (isAnimate) {
      targetMenuLg.dataset.headerMenuLgState = 'close';
      targetMenuLgOverlay.dataset.headerMen